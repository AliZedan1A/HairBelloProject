@page "/BarbersManagement"

@using ClientSide.Services.Class
@using Domain.DataTransfareObject
@using Domain.DatabaseModels
@using Services.InterFace
@inject DateTimeService dateTimeService

@inject IBarberService _BarberService
@inject IBarberSchedule _BarberSchedule
@inject AlertService _Alert

<div class="container fade-in-up">
    <header class="header">
        <h1 class="main-title"><i class="fas fa-cut"></i> إدارة الحلاقين</h1>
        <div class="new-barber-section">
            <input class="text-input" placeholder="اسم الحلاق الجديد" @bind="newBarberName" />
            <button class="btn primary-btn" @onclick="AddBarber">
                <i class="fas fa-plus"></i> إضافة حلاق
            </button>
        </div>
    </header>

    @if (!barbers.Any())
    {
        <div class="empty-state">
            <i class="fas fa-user-slash icon-big"></i>
            <p>لا يوجد حلاقون مسجلون حالياً.</p>
        </div>
    }
    else
    {
        <div class="barbers-list">
            @foreach (var barber in barbers)
            {
                <div class="barber-card fade-in-up">
                    <div class="barber-header">
                        @if (editingBarberId == barber.Id)
                        {
                            <div class="edit-mode">
                                <input class="text-input" @bind="editingBarberName" />
                                <div class="actions-row">
                                    <button class="btn success-btn" @onclick="SaveBarberEdit">
                                        <i class="fas fa-check"></i> حفظ
                                    </button>
                                    <button class="btn danger-btn" @onclick="CancelBarberEdit">
                                        <i class="fas fa-times"></i> إلغاء
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="barber-info">
                                <h2><i class="fas fa-user"></i> @barber.Name</h2>
                                <div class="actions-row">
                                    <button class="btn warning-btn" @onclick="@(() => StartBarberEdit(barber))">
                                        <i class="fas fa-edit"></i> تعديل
                                    </button>
                                    <button class="btn danger-btn" @onclick="@(() => DeleteBarber(barber.Id))">
                                        <i class="fas fa-trash"></i> حذف
                                    </button>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="toggle-row">
                        <button class="btn outline-btn" @onclick="@(() => ToggleServices(barber.Id))">
                            <i class="fas fa-concierge-bell"></i>
                            @((openServices.Contains(barber.Id) ? "إخفاء" : "عرض") + " الخدمات")
                        </button>
                        <button class="btn outline-btn" @onclick="@(() => ToggleShifts(barber.Id))">
                            <i class="fas fa-calendar-alt"></i>
                            @((openShifts.Contains(barber.Id) ? "إخفاء" : "عرض") + " أوقات العمل")
                        </button>
                    </div>

                    @if (openServices.Contains(barber.Id))
                    {
                        <div class="section services-section fade-in-up">
                            <h3><i class="fas fa-concierge-bell"></i> الخدمات</h3>
                            @if (addingServiceBarberId == barber.Id)
                            {
                                <div class="form-grid">
                                    <input class="text-input" placeholder="اسم الخدمة" @bind="newServiceTitle" />
                                    <input class="text-input" type="number" placeholder="المدة بالدقائق" @bind="newServiceTime" />
                                    <input class="text-input" type="number" step="0.1" placeholder="السعر بالشيكل" @bind="newServicePrice" />
                                    <div class="actions-row">
                                        <button class="btn success-btn" @onclick="ConfirmAddService">
                                            <i class="fas fa-check"></i> تأكيد
                                        </button>
                                        <button class="btn danger-btn" @onclick="CancelAddService">
                                            <i class="fas fa-times"></i> إلغاء
                                        </button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <button class="btn primary-btn" @onclick="@(() => StartAddService(barber.Id))">
                                    <i class="fas fa-plus"></i> إضافة خدمة جديدة
                                </button>
                            }
                            @if (barber.Services?.Any() == true)
                            {
                                <ul class="services-list">
                                    @foreach (var service in barber.Services)
                                    {
                                        <li>
                                            @if (editingServiceId == service.Id)
                                            {
                                                <div class="edit-mode">
                                                    <input class="text-input" @bind="editingServiceTitle" />
                                                    <input class="text-input" type="number" @bind="editingServiceTime" />
                                                    <input class="text-input" type="number" step="0.1" @bind="editingServicePrice" />
                                                    <div class="actions-row">
                                                        <button class="btn success-btn" @onclick="SaveServiceEdit">
                                                            <i class="fas fa-save"></i> حفظ
                                                        </button>
                                                        <button class="btn danger-btn" @onclick="CancelServiceEdit">
                                                            <i class="fas fa-times"></i> إلغاء
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="service-item">
                                                    <span class="service-info" dir="rtl">
                                                        <strong>@service.Title</strong>
                                                        - (@service.Time) دقيقة
                                                        - @service.Price شيكل
                                                    </span>
                                                    <div class="actions-row">
                                                        <button class="btn warning-btn" @onclick="@(() => StartServiceEdit(service))">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn danger-btn" @onclick="@(() => DeleteService(service.Id))">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="empty-hint">لا توجد خدمات مسجلة.</p>
                            }
                        </div>
                    }

                    @if (openShifts.Contains(barber.Id))
                    {
                        <div class="section shifts-section fade-in-up">
                            <h3><i class="fas fa-calendar-alt"></i> أوقات العمل</h3>
                            @if (addingShiftBarberId == barber.Id)
                            {
                                <div class="form-grid">
                                    <select class="text-input" @bind="newShiftSelectedDay">
                                        @foreach (var day in ArabicDays)
                                        {
                                            <option value="@day">@day</option>
                                        }
                                    </select>
                                    <input class="text-input" placeholder="وقت البدء (HH:MM)" @bind="newShiftStartTimeString" />
                                    <input class="text-input" placeholder="وقت النهاية (HH:MM)" @bind="newShiftEndTimeString" />
                                    <div class="actions-row">
                                        <button class="btn success-btn" @onclick="ConfirmAddShift">
                                            <i class="fas fa-check"></i> تأكيد
                                        </button>
                                        <button class="btn danger-btn" @onclick="CancelAddShift">
                                            <i class="fas fa-times"></i> إلغاء
                                        </button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <button class="btn primary-btn" @onclick="@(() => StartAddShift(barber.Id))">
                                    <i class="fas fa-plus"></i> إضافة جدول جديد
                                </button>
                            }
                            @if (barber.BarberSchedules?.Any() == true)
                            {
                                <ul class="shifts-list">
                                    @foreach (var shift in barber.BarberSchedules)
                                    {
                                        <li>
                                            @if (editingShiftId == shift.Id)
                                            {
                                                <div class="edit-mode">
                                                    <select class="text-input" @bind="editingShiftSelectedDay">
                                                        @foreach (var day in ArabicDays)
                                                        {
                                                            <option value="@day">@day</option>
                                                        }
                                                    </select>
                                                    <span>وقت البدء</span>
                                                    <input class="text-input" placeholder="وقت البدء (HH:MM)" @bind="editingShiftStartTimeString" />
                                                    <span>وقت النهاية</span>
                                                    <input class="text-input" placeholder="وقت النهاية (HH:MM)" @bind="editingShiftEndTimeString" />
                                                    <div class="actions-row">
                                                        <button class="btn success-btn" @onclick="ConfirmEditShift">
                                                            <i class="fas fa-save"></i> حفظ
                                                        </button>
                                                        <button class="btn danger-btn" @onclick="CancelEditShift">
                                                            <i class="fas fa-times"></i> إلغاء
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="shift-item">
                                                    <span class="shift-info">
                                                        <b>@ToArabicDay(shift.DayName)</b>
                                                        (@shift.StartHour.ToString(@"hh\:mm")) - (@shift.EndHour.ToString(@"hh\:mm"))
                                                    </span>
                                                    <div class="actions-row">
                                                        <button class="btn warning-btn" @onclick="@(() => StartEditShift(shift))">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn danger-btn" @onclick="@(() => DeleteShift(shift.Id))">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="empty-hint">لا توجد أوقات عمل مسجلة.</p>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />


@code {
    /****************************/
    /* 1) الأيام بالعربية      */
    /****************************/
    private string[] ArabicDays = new[] {
        "السبت", "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة"
    };

    /************************************************/
    /* 2) قاموس تحويل من (عربي -> انجليزي) والعكس   */
    /************************************************/
    private Dictionary<string, string> ArabicToEnglishDays = new()
    {
        { "السبت",   "Saturday" },
        { "الأحد",   "Sunday" },
        { "الاثنين", "Monday" },
        { "الثلاثاء","Tuesday" },
        { "الأربعاء","Wednesday" },
        { "الخميس",  "Thursday" },
        { "الجمعة",  "Friday" }
    };

    // دالة لتحويل اليوم الإنجليزي إلى عربي عند العرض
    private string ToArabicDay(string englishDay)
    {
        var found = ArabicToEnglishDays.FirstOrDefault(kv => kv.Value == englishDay);
        return string.IsNullOrWhiteSpace(found.Key) ? englishDay : found.Key;
    }

    private List<BarberModel> barbers = new();
    private HashSet<int> openServices = new();
    private HashSet<int> openShifts = new();

    // إضافة حلاق جديد
    private string newBarberName = "";

    // تعديل اسم الحلاق
    private int editingBarberId;
    private string editingBarberName;

    // إدارة الخدمات
    private int addingServiceBarberId;
    private string newServiceTitle = "";
    private int newServiceTime;
    private double newServicePrice;

    private int editingServiceId;
    private string editingServiceTitle;
    private int editingServiceTime;
    private double editingServicePrice;

    // إدارة الشفتات
    private int addingShiftBarberId;
    private string newShiftSelectedDay = "السبت";
    private string newShiftStartTimeString = "09:00";
    private string newShiftEndTimeString = "17:00";

    private int editingShiftId;
    private string editingShiftSelectedDay;
    private string editingShiftStartTimeString;
    private string editingShiftEndTimeString;

    protected override async Task OnInitializedAsync()
    {
        await LoadBarbersAsync();
    }

    private async Task LoadBarbersAsync()
    {
        var res = await _BarberService.GetBarberListAsync();
        if (res.IsSucceeded && res.Value != null)
        {
            barbers = res.Value;
        }
        else
        {
            _Alert.ShowAlert("فشل في تحميل قائمة الحلاقين", AlertType.Error);
        }
    }

    private void ToggleServices(int barberId)
    {
        if (openServices.Contains(barberId))
            openServices.Remove(barberId);
        else
            openServices.Add(barberId);
    }

    private void ToggleShifts(int barberId)
    {
        if (openShifts.Contains(barberId))
            openShifts.Remove(barberId);
        else
            openShifts.Add(barberId);
    }

    /**************************/
    /*    إضافة حلاق جديد     */
    /**************************/
    private async Task AddBarber()
    {
        if (string.IsNullOrWhiteSpace(newBarberName))
        {
            _Alert.ShowAlert("يرجى إدخال اسم الحلاق", AlertType.Error);
            return;
        }

        var response = await _BarberService.CreateBarber(new CreateBarberDto { Name = newBarberName });
        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تم إضافة الحلاق بنجاح", AlertType.Success);
            newBarberName = "";
            await LoadBarbersAsync();
        }
        else
        {
            _Alert.ShowAlert("فشل في إضافة الحلاق", AlertType.Error);
        }
    }

    /**************************/
    /*   تعديل اسم الحلاق     */
    /**************************/
    private void StartBarberEdit(BarberModel barber)
    {
        editingBarberId = barber.Id;
        editingBarberName = barber.Name;
    }

    private async Task SaveBarberEdit()
    {
        if (editingBarberId == 0 || string.IsNullOrWhiteSpace(editingBarberName))
        {
            _Alert.ShowAlert("لا يوجد حلاق مختار أو الاسم فارغ!", AlertType.Error);
            return;
        }

        var response = await _BarberService.EditBarber(new UpdateBarberDto { Id = editingBarberId, Name = editingBarberName });
        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تم تعديل اسم الحلاق بنجاح", AlertType.Success);
        }
        else
        {
            _Alert.ShowAlert("فشل في تعديل الحلاق", AlertType.Error);
        }
        editingBarberId = 0;
        editingBarberName = "";
        await LoadBarbersAsync();
    }

    private void CancelBarberEdit()
    {
        editingBarberId = 0;
        editingBarberName = "";
    }

    private async Task DeleteBarber(int id)
    {
        var response = await _BarberService.DeleteBarber(id);
        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تم حذف الحلاق بنجاح", AlertType.Success);
            await LoadBarbersAsync();
        }
        else
        {
            _Alert.ShowAlert("فشل في حذف الحلاق", AlertType.Error);
        }
    }

    /**************************/
    /*    إضافة / تعديل خدمة  */
    /**************************/
    private void StartAddService(int barberId)
    {
        addingServiceBarberId = barberId;
        newServiceTitle = "";
        newServiceTime = 0;
        newServicePrice = 0;
    }

    private void CancelAddService()
    {
        addingServiceBarberId = 0;
    }

    private async Task ConfirmAddService()
    {
        if (addingServiceBarberId == 0 || string.IsNullOrEmpty(newServiceTitle))
        {
            _Alert.ShowAlert("البيانات غير مكتملة لإضافة الخدمة", AlertType.Error);
            return;
        }

        var response = await _BarberService.AddBarberService(new CreateServiceDto
        {
            BarberId = addingServiceBarberId,
            Title = newServiceTitle,
            Time = newServiceTime,
            Price = newServicePrice
        });

        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تمت إضافة الخدمة بنجاح", AlertType.Success);
        }
        else
        {
            _Alert.ShowAlert("فشل في إضافة الخدمة", AlertType.Error);
        }
        addingServiceBarberId = 0;
        await LoadBarbersAsync();
    }

    private void StartServiceEdit(ServiceModel service)
    {
        editingServiceId = service.Id;
        editingServiceTitle = service.Title;
        editingServiceTime = service.Time;
        editingServicePrice = service.Price;
    }

    private void CancelServiceEdit()
    {
        editingServiceId = 0;
    }

    private async Task SaveServiceEdit()
    {
        if (editingServiceId == 0 || string.IsNullOrWhiteSpace(editingServiceTitle))
        {
            _Alert.ShowAlert("البيانات غير مكتملة لتعديل الخدمة", AlertType.Error);
            return;
        }

        var response = await _BarberService.EditBarberService(new UpdateServiceDto
        {
            Id = editingServiceId,
            Title = editingServiceTitle,
            Time = editingServiceTime,
            Price = editingServicePrice
        });

        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تم تعديل الخدمة بنجاح", AlertType.Success);
        }
        else
        {
            _Alert.ShowAlert("فشل في تعديل الخدمة", AlertType.Error);
        }
        editingServiceId = 0;
        await LoadBarbersAsync();
    }

    private async Task DeleteService(int serviceId)
    {
        var response = await _BarberService.DeleteService(serviceId);
        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تم حذف الخدمة بنجاح", AlertType.Success);
        }
        else
        {
            _Alert.ShowAlert("فشل في حذف الخدمة", AlertType.Error);
        }
        await LoadBarbersAsync();
    }

    /**************************/
    /*    إضافة / تعديل شفت   */
    /**************************/
    private void StartAddShift(int barberId)
    {
        addingShiftBarberId = barberId;
        newShiftSelectedDay = "السبت";
        newShiftStartTimeString = "09:00";
        newShiftEndTimeString = "17:00";
    }

    private void CancelAddShift()
    {
        addingShiftBarberId = 0;
    }

    private async Task ConfirmAddShift()
    {
        if (!TimeSpan.TryParse(newShiftStartTimeString, out var startTime) ||
            !TimeSpan.TryParse(newShiftEndTimeString, out var endTime))
        {
            _Alert.ShowAlert("تنسيق الوقت غير صحيح (HH:MM)", AlertType.Error);
            return;
        }

        var englishDay = ArabicToEnglishDays[newShiftSelectedDay];
        var response = await _BarberSchedule.AddScheduleByDay(new CreateBarberScheduleDto
        {
            BarberId = addingShiftBarberId,
            DayName = englishDay,
            StartHour =  startTime,
            EndHour = endTime
        });

        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تم إضافة الشفت بنجاح", AlertType.Success);
        }
        else
        {
            _Alert.ShowAlert("فشل في إضافة الشفت", AlertType.Error);
        }
        addingShiftBarberId = 0;
        await LoadBarbersAsync();
    }

    private void StartEditShift(BarberScheduleModel shift)
    {
        editingShiftId = shift.Id;
        editingShiftSelectedDay = ArabicToEnglishDays.FirstOrDefault(kv => kv.Value == shift.DayName).Key ?? "السبت";
        editingShiftStartTimeString = shift.StartHour.ToString(@"hh\:mm");
        editingShiftEndTimeString = shift.EndHour.ToString(@"hh\:mm");
    }

    private void CancelEditShift()
    {
        editingShiftId = 0;
    }

    private async Task ConfirmEditShift()
    {
        if (!TimeSpan.TryParse(editingShiftStartTimeString, out var startTime) ||
            !TimeSpan.TryParse(editingShiftEndTimeString, out var endTime))
        {
            _Alert.ShowAlert("تنسيق الوقت غير صحيح (HH:MM)", AlertType.Error);
            return;
        }

        var englishDay = ArabicToEnglishDays[editingShiftSelectedDay];
        var response = await _BarberSchedule.EditScheduleById(new UpdateBarberScheduleDto
        {
            Id = editingShiftId,
            DayName = englishDay,
            StartHour = startTime,
            EndHour = endTime
        });

        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تم تعديل الشفت بنجاح", AlertType.Success);
        }
        else
        {
            _Alert.ShowAlert("فشل في تعديل الشفت", AlertType.Error);
        }
        editingShiftId = 0;
        await LoadBarbersAsync();
    }

    private async Task DeleteShift(int shiftId)
    {
        var response = await _BarberSchedule.RemoveScheduleByDay(shiftId);
        if (response.IsSucceeded)
        {
            _Alert.ShowAlert("تم حذف الشفت بنجاح", AlertType.Success);
        }
        else
        {
            _Alert.ShowAlert("فشل في حذف الشفت", AlertType.Error);
        }
        await LoadBarbersAsync();
    }
}

<style>
/* Animation */
@@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(15px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
.fade-in-up {
  animation: fadeInUp 0.6s ease;
}

/* Container */
.container {
   overflow-y: auto;
  max-width: 900px;
  margin: 2rem auto;
  padding: 1rem;
  font-family: "Tajawal", sans-serif;
  background-color: #fafafa;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

/* Header */
.header {
  text-align: center;
  margin-bottom: 1.5rem;
}

.main-title {
  color: #2c3e50;
  margin-bottom: 1rem;
}

/* New barber section */
.new-barber-section {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

/* Barbers grid */
.barbers-list {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1rem;
}

/* Barber card */
.barber-card {
  background: #fff;
  border: 1px solid #eee;
  border-radius: 6px;
  padding: 1rem;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

/* Barber header */
.barber-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
}

/* Edit mode */
.edit-mode {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

/* Toggle row */
.toggle-row {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

/* Sections */
.section {
  background: #fefefe;
  border: 1px solid #eee;
  border-radius: 6px;
  padding: 1rem;
  margin-top: 1rem;
}

/* Form grid */
.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 0.5rem;
  align-items: end;
  margin-top: 1rem;
}

/* Text inputs */
.text-input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.95rem;
}
.text-input:focus {
  outline: none;
  border-color: #3498db;
  box-shadow: 0 0 3px rgba(52, 152, 219, 0.4);
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.3rem;
  padding: 0.45rem 1rem;
  border: none;
  border-radius: 4px;
  font-size: 0.95rem;
  cursor: pointer;
  transition: background-color 0.3s, transform 0.2s;
}
.btn:hover {
  transform: translateY(-2px);
}

/* Button variants */
.primary-btn {
  background-color: #3498db;
  color: #fff;
}
.primary-btn:hover {
  background-color: #2980b9;
}
.success-btn {
  background-color: #2ecc71;
  color: #fff;
}
.success-btn:hover {
  background-color: #27ae60;
}
.warning-btn {
  background-color: #f1c40f;
  color: #555;
}
.warning-btn:hover {
  background-color: #dab10d;
}
.danger-btn {
  background-color: #e74c3c;
  color: #fff;
}
.danger-btn:hover {
  background-color: #c0392b;
}
.outline-btn {
  background: transparent;
  border: 1px solid #3498db;
  color: #3498db;
}
.outline-btn:hover {
  background-color: #3498db;
  color: #fff;
}

/* Lists */
.services-list,
.shifts-list {
  list-style: none;
  padding: 0;
  margin: 0.5rem 0;
}
.services-list li,
.shifts-list li {
  margin-bottom: 0.75rem;
}

/* Service and shift items */
.service-item,
.shift-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #fff;
  border-radius: 4px;
  padding: 0.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s;
}
.service-item:hover,
.shift-item:hover {
  transform: translateY(-2px);
}

/* Empty state */
.empty-state {
  text-align: center;
  padding: 2rem;
  background: #fff;
  border: 1px solid #eee;
  border-radius: 6px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}
.empty-hint {
  font-size: 0.9rem;
  color: #888;
  margin-top: 0.5rem;
}

/* Responsive adjustments */
@@media (max-width: 768px) {
  .new-barber-section {
    flex-direction: column;
  }
  .barber-header {
    flex-direction: column;
    align-items: flex-start;
  }
  .actions-row {
    width: 100%;
    justify-content: space-around;
  }
}
</style>
